name: Deploy Backend to ECR + EC2

# work flow
# 1. 도커 이미지 빌드
# 2. ECR 푸시
# 3. EC2에 접속해서 docker-compose pull/up 실행
# 4. 컨테이너 재시작

# main 브랜치의 server 디렉토리에 변경사항이 생겼을 때 실행
on:
  push:
    paths:
      - 'server/**'
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. 깃허브 리포지토리 코드 체크아웃
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. AWS 접근을 위한 IAM 자격 증명 설정
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2  

    # 3. ECR 로그인 
    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # 4. 서버 디렉토리 기준으로 도커 이미지 빌드 및 ECR에 푸시
    - name: Build, tag, and push image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: currex-server       # ECR에 미리 만들어둔 리포지토리 이름
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./server
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # 5. EC2 인스턴스에 SSH로 접속 후 Docker Compose
    - name: SSH into EC2 and deploy container with docker-compose
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}          # EC2 퍼블릭 IP
        username: ubuntu                       # EC2 OS 사용자 (Amazon Linux는 ec2-user, Ubuntu는 ubuntu)
        key: ${{ secrets.EC2_SSH_KEY }}        # EC2 접속용 .pem 키
        script: |
          # EC2 내에서 ECR 로그인
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

          # 기존 컨테이너 중지 및 삭제 (존재하지 않으면 무시)
          docker stop currex-server || true
          docker rm currex-server || true

          # 이전 이미지 삭제 (없어도 무시)
          docker image rm ${{ steps.login-ecr.outputs.registry }}/currex-backend:latest || true

          # docker-compose 사용 최신 이미지 pull
          docker compose -f /home/ubuntu/currex-server/compose.yml pull

          # 최신 이미지를 기준으로 컨테이너를 재시작(이미지 변경되었을 경우 업데이트)
          docker compose -f /home/ubuntu/currex-server/compose.yml up -d